<?php

namespace backend\controllers;

use Yii;
use common\models\CompanyUsers;
use common\models\CompanyUsersSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CompanyUsersController implements the CRUD actions for CompanyUsers model.
 */
class CompanyUsersController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function beforeAction($action)
    {
        if(Yii::$app->user->isGuest){
            header('location:/admin/login');
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    /**
     * Lists all CompanyUsers models.
     * @return mixed
     */
    public function actionIndex($type=0)
    {
        $searchModel = new CompanyUsersSearch();
        $dataProvider = $searchModel->search(['type'=>$type]);
        
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }

    public function actionDirectors()
    {
        return $this->actionIndex(1);
        $searchModel = new CompanyUsersSearch();
        Yii::$app->request->queryParams['type'] = 1;
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }
    public function actionWorkers()
    {
        return $this->actionIndex(0);
        $searchModel = new CompanyUsersSearch();
        Yii::$app->request->queryParams['type'] = 0;
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        //echo 'test';
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }

    /**
     * Creates a new CompanyUsers model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        $model = new CompanyUsers();

        if ($model->updateModel( $model, true )) {
            return $this->redirect(['update', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);

    }

    /**
     * Updates an existing CompanyUsers model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->updateModel( $model )) {
            return $this->redirect(['update', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing CompanyUsers model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $user = $this->findModel($id);
        
        $children = CompanyUsers::find()->where(['parent_id' => $user['id']])->count();
        
        if($children == 0){
            $user->delete();
            return $this->redirect(['directors']);
        } else {
            Yii::$app->session->setFlash('info', 'У данного руководителя есть подчиненные сотрудники. Сперва удалите их');
            return $this->redirect(['directors']);
        }
        
    }

    /**
     * Finds the CompanyUsers model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return CompanyUsers the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = CompanyUsers::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }


}
