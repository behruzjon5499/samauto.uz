<?php

namespace backend\controllers;

use common\models\VacancyRequest;
use common\models\VacancyRequestSearch;
use Yii;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;

/**
 * VacancyRequestController implements the CRUD actions for VacancyRequest model.
 */
class VacancyRequestController extends Controller
{
    public $layout = 'main-career';
    const STATUS_WAIT = 0;
    const STATUS_ACTIVE = 10;

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            header('location:/admin/login');
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all VacancyRequest models.
     * @return mixed
     */
    public function actionIndex()
    {

        $searchModel = new VacancyRequestSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }


    /**
     * Creates a new VacancyRequest model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new VacancyRequest();
        if (Yii::$app->request->isPost && $model->load(Yii::$app->request->post())) {
            if (!empty($_FILES['VacancyRequest']['name']['file'])) {
                $model->file = $_POST['VacancyRequest']['file'];
                $model->file = UploadedFile::getInstance($model, 'file');
                $model->upload();
                $model->save(false);

            } else {
                $model->save();
            }
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing VacancyRequest model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);


        if (Yii::$app->request->isPost && $model->load(Yii::$app->request->post())) {
            if (!empty($_FILES['VacancyRequest']['name']['file'])) {
                $model->file = $_POST['VacancyRequest']['file'];
                $model->file = UploadedFile::getInstance($model, 'file');
                $model->upload();
                $model->save(false);
            } else {
                $model->save();
            }
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing VacancyRequest model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the VacancyRequest model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return VacancyRequest the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = VacancyRequest::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionActive($id)
    {
        $vacancyrequest = VacancyRequest::find()->where(['id' => $id])->one();
        $vacancyrequest->status = self::STATUS_ACTIVE;
        $vacancyrequest->save(false);
        Yii::$app
            ->mailer
            ->compose(['html' => 'request/confirm-html', 'text' => 'request/confirm-text'])
            ->setFrom('no-reply@samauto.uz')
            ->setTo($vacancyrequest->email)
            ->setSubject('Welcome to samauto')
            ->send();

        return $this->render('view', [
            'id' => $id,
            'model' => $vacancyrequest,
        ]);
    }

    public function actionWait($id)
    {
        $vacancyrequest = VacancyRequest::find()->where(['id' => $id])->one();
        $vacancyrequest->status = self::STATUS_WAIT;
        $vacancyrequest->save(false);
        return $this->render('view', [
            'id' => $id,
            'model' => $vacancyrequest,
        ]);
    }


}
