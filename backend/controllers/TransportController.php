<?php

namespace backend\controllers;

use common\models\Transport;
use common\models\TransportGallery;
use common\models\TransportSearch;
use Yii;
use yii\filters\VerbFilter;
use yii\helpers\VarDumper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * TransportController implements the CRUD actions for Transport model.
 */
class TransportController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            header('location:/admin/login');
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Transport models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new TransportSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);


        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    /**
     * Creates a new Transport model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Transport();

        if ($model->updateModel(true)) {
            $model->doors = Yii::$app->request->post('doors');
            $model->tip_kuzov = Yii::$app->request->post('tip_kuzov');
            $model->count = Yii::$app->request->post('count');
            $model->special =Yii::$app->request->post('special');
            $model->auto_mex =Yii::$app->request->post('auto_mex');
            $model->trucks =Yii::$app->request->post('trucks');

            return $this->redirect(['update', 'id' => $model->id]);
        } else {

            return $this->render('create', [
                'model' => $model,
                'gallery' => false,

            ]);
        }
    }

    /**
     * Updates an existing Transport model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->updateModel()) {
            return $this->redirect(['update', 'id' => $model->id]);
        } else {

            if (!$gallery = TransportGallery::find()->where(['transport_id' => $model->id])->all()) {
                $gallery = false;
            }
            return $this->render('update', [
                'model' => $model,
                'gallery' => $gallery,
            ]);
        }
    }

    /**
     * Deletes an existing Transport model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Transport model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Transport the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Transport::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    // удаление изображения из галереи
    public function actionDeleteGalleryItem()
    {
        $id = (int)Yii::$app->request->post('id');
        if ($gallery = TransportGallery::findOne($id)) {
            $path = Yii::getAlias("@frontend/web/uploads/transport/" . $id . '/gallery/');

            @unlink($path . $gallery->image);
            @unlink($path . 'thumb/' . $gallery->image);

            $gallery->delete();

            return json_encode(['status' => 1]);
        }

        return json_encode(['status' => 0]);
    }

    // удаление файла вложения
    public function actionDeleteFile()
    {
        $id = (int)Yii::$app->request->post('id');
        if ($transport = Transport::findOne($id)) {
            $path = Yii::getAlias("@frontend/web/uploads/transport/" . $id . '/');

            $data = json_decode($transport->data, true);

            if (isset($data['complect']['file'])) {
                $file = $data['complect']['file'];

                @unlink($path . $file);

                $data['complect']['file'] = '';
                $transport->data = json_encode($data, JSON_UNESCAPED_UNICODE);
                $transport->save();

                return json_encode(['status' => 1]);

            }


        }

        return json_encode(['status' => 0]);
    }


}
