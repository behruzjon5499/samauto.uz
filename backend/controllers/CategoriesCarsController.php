<?php

namespace backend\controllers;

use common\models\ActionsSearch;
use common\models\Attributes;
use common\models\AttributesSearch;
use common\models\CategoriesCars;
use common\models\CategoriesCarsSearch;
use Yii;
use common\models\Categories;
use common\models\CategoriesSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

use common\helpers\TextHelper;

use yii\imagine\Image;
use yii\web\UploadedFile;

/**
 * CategoriesController implements the CRUD actions for Categories model.
 */
class CategoriesCarsController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if(Yii::$app->user->isGuest){
            header('location:/admin/login');
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Categories models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new CategoriesCarsSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }

    /**
     * Creates a new Categories model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new CategoriesCars();

        if ( $this->update($model, true) ){

            return $this->redirect(['index']);
        } else {

            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }


    /**
     * Updates an existing Categories model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ( $this->update($model) ){

            return $this->redirect(['update', 'id' => $model->id]);
        } else {

            $searchModel = new CategoriesCarsSearch();
            $dataProvider = $searchModel->searchSubCategories(Yii::$app->request->queryParams);

            return $this->render('update', [
                'model' => $model,
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);

        }
    }



    private function update(&$model, $new=false){

        $image = 'tmp_image';
        $folder = 'categories';

        $post = Yii::$app->request->post();

        if( $model->load($post) ) {


            /*
			if( $model->link =='' && isset($post[$class]['title_ru']) ) {
                $model->link = TextHelper::Transliterate( $post[$class]['title_ru'] );
            } */

           /* $model->link_ru = TextHelper::Transliterate( $post['CategoriesCars']['title_ru'] );
            $model->link_uz = TextHelper::Transliterate( $post['CategoriesCars']['title_uz'] );
            $model->link_en = TextHelper::Transliterate( $post['CategoriesCars']['title_en'] ); */

            //$model->link = $post['Categories']['title'];

            // $model->date = strtotime($post[$class]['date'],time());

            if($model->parent_id==null || $model->parent_id==''){
                $model->parent_id = 0;
            }
            $model->save();

            // сохранение изображения

            if( $file = UploadedFile::getInstance($model, $image ) ){

//                if( ! preg_match('/image\//',$file->type) ) return false; // загружена не картинка!

                //if($model->isNewRecord){
                //    $fname = $model->image;
                //}else {
                $fname = time() . '.' . $file->extension;
                //}

                $path_main = Yii::getAlias("@frontend/web/uploads/{$folder}/"  );
                $path = Yii::getAlias("@frontend/web/uploads/{$folder}/" . $model->id . '/' );

                // удалить старое изображение, нужно если разное расширение
                //@unlink($path . $model->image); // имя
                //@unlink($path . 'thumb/' . $model->image);

                if(!is_dir($path_main)) @mkdir($path_main);
                if(!is_dir($path)) @mkdir($path);
                if(!is_dir($path.'thumb')) @mkdir($path .'thumb');

                // основная картинка - оригинал
                $file->saveAs($path . $fname );

                $filepath = $path . $fname ;

                //echo $filepath; exit;

                // эскиз
                //Image::thumbnail($filepath, 60, 60)
                //   ->save($path . 'thumb/' . $fname, ['quality' => 100]);

                //  main cat pic
                /*Image::thumbnail($filepath, 190, 190)
                    ->save($filepath, ['quality' => 100]);*/


                //@unlink($filepath); // удалить оригинал 'orig_'

                $model->image = $fname;
                if(!$model->save()){
                    // print_r($model->getErrors());
                    return false;
                }
            }

            /* if($model->link==''){
                $model->link = $model->title;//TextHelper::Transliterate($model->title);
            }*/

            if( !$model->save() ){
                Yii::$app->session->setFlash('info-error','Ошибка при сохранении документа!');
                //print_r($model->getErrors());
                return false;
            }

            Yii::$app->session->setFlash('info-success','Данные успешно сохранены!');

            return true;
        }

        return false;

    }

    /**
     * Deletes an existing Categories model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function actionDelete($id)
    {
        $model = CategoriesCars::findOne($id);

        $path = Yii::getAlias("@frontend/web/uploads/categories/" . $id . '/' );

        // удалить изображения
        @unlink($path . $model->image); // имя
        @unlink($path . 'thumb/' . $model->image);

        $parent_id = $model->parent_id ;
        $cat_id = $model->id;

        $model->delete();

        // если корневая удаляется
        if( $parent_id == 0 ){
            // поиск всех вложенных категорий
            if( $cats_sub = CategoriesCars::find()->select(['id','image'])->where(['parent_id'=>$cat_id])->asArray()->all() ){
                $a_cats_sub = [];
                $path = Yii::getAlias("@frontend/web/uploads/categories/" );
                // удалить также все атрибуты вложенных категорий
                foreach($cats_sub as $cs){
                    // удалить изображения
                    @unlink($path . $cs['id'] . '/' . $cs['image']);
                    @unlink($path . $cs['id'] . '/thumb/' . $cs['image']);
                    $a_cats_sub[] = $cs['id']; // все id вложенных категорий
                }

            }
            // удалить вложенные категории
            CategoriesCars::deleteAll(['parent_id'=>$cat_id]);

            return $this->redirect(['index']);
        }


        // перейти в родительскую
        return $this->redirect(['update?id='.$parent_id]);
    }

    /**
     * Finds the Categories model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Categories the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = CategoriesCars::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }



}
